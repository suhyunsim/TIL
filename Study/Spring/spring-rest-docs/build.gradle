buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.asciidoctor.convert" version "1.5.9.2" //AsciiDoc 파일을 컨버팅하고 Build 폴더에 복사하기 위한 플러그인
}

group = 'com.codesquad'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

asciidoctor {
    dependsOn test //gradle build 시 test -> asciidoctor 순으로 수행
}

bootJar {
    dependsOn asciidoctor //asciidoctor -> bootJar 순으로 수행
    from ("${asciidoctor.outputDir}/html5") { //./build/asciidoc/html5/ 에 html 파일 생성, jar 안에 /static/docs/ 폴더에 복사
        into 'static/docs'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly('com.h2database:h2')
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc') // mockmvc 사용
}

test {
    useJUnitPlatform()
}
